esphome:
  name: modbus01
  friendly_name: Modbus01

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
#   level: VERY_VERBOSE

# Enable Home Assistant API
api:
  encryption:
    key: "B+ba66Wxv2+s9dmQ31gu/RnI7k5Lh+aJ5VbwZfGWgf8="

ota:
  - platform: esphome
    password: "47bfc75651fe35693d6d396028ddc04c"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Modbus Fallback Hotspot"
    password: "53eAbOSOuMxB"

web_server:
  port: 80
  version: 3
  
captive_portal:

modbus:
  - id: modbus01
    uart_id: uart_modbus01
  
uart:
  - id: uart_modbus01
    tx_pin: GPIO16
    rx_pin: GPIO17
    baud_rate: 9600
#    baud_rate: 19200
    parity: even
    data_bits: 8
    stop_bits: 1
  
modbus_controller:
  - id: hru
    address: 72 # the Modbus device addr, was 0x1
    modbus_id: modbus01
    update_interval: 20s
    setup_priority: -10
    command_throttle: 200ms
  - id: growatt
    address: 01 # the Modbus device addr, was 0x1
    modbus_id: modbus01
    update_interval: 10s
    setup_priority: -10
    command_throttle: 800ms

# output:
#   - platform: modbus_controller
#     modbus_controller_id: hru
#     address: 1
#     register_type: holding
#     value_type: U_WORD


sensor:
# HRU START =========================================
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU modbus-adres"
    id: hru_modbusadres
    register_type: holding
    address: 0 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  # - platform: modbus_controller
  #   modbus_controller_id: hru
  #   name: "HRU baud rate"
  #   id: hru_baudrate
  #   register_type: holding
  #   address: 1 # 0x000E
  #   value_type: U_WORD
  #   skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU pariteit"
    id: hru_pariteit
    register_type: holding
    address: 2 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU softwareversie"
    id: hru_softwareversie
    register_type: holding
    address: 13 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU software revisie"
    id: hru_softwarerevisie
    register_type: holding
    address: 14 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU lijstversie"
    id: hru_lijstversie
    register_type: holding
    address: 15 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU OEM code"
    id: hru_oemcode
    register_type: holding
    address: 16 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU serienr"
    id: hru_serienr
    register_type: holding
    address: 103 # 0x000E
    value_type: U_QWORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "foutnummer"
    id: hru_foutnummer
    register_type: holding
    address: 199 # 0x000E
    value_type: U_WORD
    unit_of_measurement: "errornr"
  # - platform: modbus_controller
  #   modbus_controller_id: hru
  #   name: "Reset"
  #   id: hru_reset
  #   register_type: holding
  #   address: 499 # 0x000E
  #   value_type: U_WORD


# error registers for now configured as read-only, but they are R/W
# error registers for now configured as read-only, but they are R/W

# bunch of registers not connected
  # - platform: modbus_controller
  #   modbus_controller_id: hru
  #   name: "highest % toevoer automode"
  #   id: hru_toevoer_maxperc
  #   register_type: holding
  #   address: 3000 # 0x000E
  #   value_type: U_WORD
  #   unit_of_measurement: "%"
  # - platform: modbus_controller
  #   modbus_controller_id: hru
  #   name: "highest % afvoer automode"
  #   id: hru_afvoer_maxperc
  #   register_type: holding
  #   address: 3001 # 0x000E
  #   value_type: U_WORD
  #   unit_of_measurement: "%"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "highest % RV non-fan"
    id: hru_RV_ext_maxperc
    register_type: holding
    address: 3010 # 0x000E
    value_type: U_WORD
    unit_of_measurement: "%"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "highest ppm CO2 non-fan"
    id: hru_co2_maxperc
    register_type: holding
    address: 3011 # 0x000E
    value_type: U_WORD
    unit_of_measurement: "ppm"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "snelheid toevoerventilator"
    id: hru_rpm_toevoerventilator
    register_type: holding
    address: 3020 # 0x000E
    value_type: U_WORD
    unit_of_measurement: "rpm"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "snelheid afvoerventilator"
    id: hru_rpm_afvoerventilator
    register_type: holding
    address: 3021 # 0x000E
    value_type: U_WORD
    unit_of_measurement: "rpm"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "power toevoerventilator"
    id: hru_pwr_toevoerventilator
    register_type: holding
    address: 3022 # 0x000E
    value_type: U_WORD
    unit_of_measurement: "W"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "power afvoerventilator"
    id: hru_pwr_afvoerventilator
    register_type: holding
    address: 3023 # 0x000E
    value_type: U_WORD
    unit_of_measurement: "W" 
  # - platform: modbus_controller
  #   modbus_controller_id: hru
  #   name: "zonekleppen aangesloten"
  #   id: hru_kleppen_connected
  #   register_type: holding
  #   address: 3024 # 0x000E
  #   value_type: U_WORD
  #   skip_updates: 10
  #   # bitmask: 0x00 #(bit 0)
  #   # Modbus error - last command: function code=0x3  register address = 0xBCC  registers count=5 payload size=0 (idem met uitlezen op dit register register count=1 payload size =0)
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "m3/h toevoer van buiten"
    id: hru_m3h_toevoer_external
    register_type: holding
    address: 3030 # 0x000E
    value_type: U_WORD
    unit_of_measurement: "m3/h"
  - platform: modbus_controller # 0x91 type, signed 16bit/10
    modbus_controller_id: hru
    name: "temp toevoer van buiten"
    id: hru_temp_toevoer_external
    register_type: holding
    address: 3032 # 0x000E
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    unit_of_measurement: "째C"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "humidity toevoer van buiten"
    id: hru_hum_toevoer_external
    register_type: holding
    address: 3033 # 0x000E
    value_type: U_WORD
    unit_of_measurement: "%"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "m3/h toevoer via vorstklep"
    id: hru_m3h_vorstklep
    register_type: holding
    address: 3040 # 0x000E
    value_type: U_WORD
    unit_of_measurement: "m3/h"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "m3/h toevoer gemengd"
    id: hru_m3h_toevoer_gemengd
    register_type: holding
    address: 3050 # 0x000E
    value_type: U_WORD
    unit_of_measurement: "m3/h"
  - platform: modbus_controller # 0x91 type, signed 16bit/10
    modbus_controller_id: hru
    name: "temp toevoer gemengd"
    id: hru_temp_toevoer_gemengd
    register_type: holding
    address: 3052 # 0x000E
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    unit_of_measurement: "째C"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "humidity toevoer gemengd"
    id: hru_hum_toevoer_gemengd
    register_type: holding
    address: 3053 # 0x000E
    value_type: U_WORD
    unit_of_measurement: "%"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "m3/h toevoer binnen totaal"
    id: hru_m3h_toevoer_binnen_total
    register_type: holding
    address: 3060 # 0x000E
    value_type: U_WORD
    unit_of_measurement: "m3/h"
  - platform: modbus_controller # 0x91 type, signed 16bit/10
    modbus_controller_id: hru
    name: "temp toevoer binnen"
    id: hru_temp_toevoer_binnen
    register_type: holding
    address: 3062 # 0x000E
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    unit_of_measurement: "째C"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "humidity toevoer naar gebouw"
    id: hru_hum_toevoer_binnen
    register_type: holding
    address: 3063 # 0x000E
    value_type: U_WORD
    unit_of_measurement: "%"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "m3/h afvoer totaal"
    id: hru_m3h_afvoer_binnen
    register_type: holding
    address: 3070 # 0x000E
    value_type: U_WORD
    unit_of_measurement: "m3/h"
  - platform: modbus_controller # 0x91 type, signed 16bit/10
    modbus_controller_id: hru
    name: "temp afvoer binnen"
    id: hru_temp_afvoer_binnen
    register_type: holding
    address: 3072 # 0x000E
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    unit_of_measurement: "째C"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "humidity afvoer binnen"
    id: hru_hum_afvoer_binnen
    register_type: holding
    address: 3073 # 0x000E
    value_type: U_WORD
    unit_of_measurement: "%"
    filters:
      - or:
          - delta: 1
          - heartbeat: 60s
      - lambda: 
          float rand1 = rand() % 1;        
          return x + rand1;
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "m3/h afvoer buiten"
    id: hru_m3h_afvoer_buiten
    register_type: holding
    address: 3080 # 0x000E
    value_type: U_WORD
    unit_of_measurement: "m3/h"
  - platform: modbus_controller # 0x91 type, signed 16bit/10
    modbus_controller_id: hru
    name: "temp afvoer buiten"
    id: hru_temp_afvoer_buiten
    register_type: holding
    address: 3082 # 0x000E
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1
    unit_of_measurement: "째C"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "humidity afvoer buiten"
    id: hru_hum_afvoer_buiten
    register_type: holding
    address: 3083 # 0x000E
    value_type: U_WORD
    unit_of_measurement: "%"
  # - platform: modbus_controller
  #   modbus_controller_id: hru
  #   name: "m3/h ask leefzone"
  #   id: hru_m3h_ask_zone1
  #   register_type: holding
  #   address: 3200 # 0x000E
  #   value_type: U_WORD
  #   unit_of_measurement: "m3/h"
  # - platform: modbus_controller
  #   modbus_controller_id: hru
  #   name: "m3/h ask slaapzone"
  #   id: hru_m3h_ask_zone2
  #   register_type: holding
  #   address: 3201 # 0x000E
  #   value_type: U_WORD
  #   unit_of_measurement: "m3/h"
  # - platform: modbus_controller
  #   modbus_controller_id: hru
  #   name: "m3/h ask natte zone" #now set to 78-260
  #   id: hru_m3h_ask_zone3
  #   register_type: holding
  #   address: 3202 # 0x000E
  #   value_type: U_WORD
  #   unit_of_measurement: "m3/h"
  # - platform: modbus_controller
  #   modbus_controller_id: hru
  #   name: "m3/h ask kookzone" # now set to 27-90
  #   id: hru_m3h_ask_zone4
  #   register_type: holding
  #   address: 3203 # 0x000E
  #   value_type: U_WORD
  #   unit_of_measurement: "m3/h"
  # - platform: modbus_controller
  #   modbus_controller_id: hru
  #   name: "m3/h ask zone 5"
  #   id: hru_m3h_ask_zone5
  #   register_type: holding
  #   address: 3204 # 0x000E
  #   value_type: U_WORD
  #   unit_of_measurement: "m3/h"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "levensduur teller deel 1"
    id: lifetime_counter_part1
    register_type: holding
    address: 4000 # 0x000E
    value_type: U_WORD
    unit_of_measurement: "h"
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "levensduur teller deel 2"
    id: lifetime_counter_part2
    register_type: holding
    address: 4001 # 0x000E
    value_type: U_WORD
    unit_of_measurement: "h"
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU bypass position"
    id: hru_bypass_valve_position_read
    register_type: holding
    address: 2032 # 0x000E
    value_type: U_WORD



# HRU
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU fout 1 aantal"
    id: HRU_errors1
    register_type: holding
    address: 200 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU fout 2 aantal"
    id: HRU_errors2
    register_type: holding
    address: 201 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU fout 3 aantal"
    id: HRU_errors3
    register_type: holding
    address: 202 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU fout 4 aantal"
    id: HRU_errors4
    register_type: holding
    address: 203 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU fout 11 aantal"
    id: HRU_errors11
    register_type: holding
    address: 210 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU fout 12 aantal"
    id: HRU_errors12
    register_type: holding
    address: 211 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU fout 13 aantal"
    id: HRU_errors13
    register_type: holding
    address: 212 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU fout 14 aantal"
    id: HRU_errors14
    register_type: holding
    address: 213 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU fout 15 aantal"
    id: HRU_errors15
    register_type: holding
    address: 214 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU fout 16 aantal"
    id: HRU_errors16
    register_type: holding
    address: 215 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU fout 17 aantal"
    id: HRU_errors17
    register_type: holding
    address: 216 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU fout 18 aantal"
    id: HRU_errors18
    register_type: holding
    address: 217 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU fout 19 aantal"
    id: HRU_errors19
    register_type: holding
    address: 218 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU fout 20 aantal"
    id: HRU_errors20
    register_type: holding
    address: 219 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU fout 21 aantal"
    id: HRU_errors21
    register_type: holding
    address: 220 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU fout 22 aantal"
    id: HRU_errors22
    register_type: holding
    address: 221 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU fout 23 aantal"
    id: HRU_errors23
    register_type: holding
    address: 222 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU fout 31 aantal"
    id: HRU_errors31
    register_type: holding
    address: 230 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU fout 32 aantal"
    id: HRU_errors32
    register_type: holding
    address: 231 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU fout 33 aantal"
    id: HRU_errors33
    register_type: holding
    address: 232 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU fout 34 aantal"
    id: HRU_errors34
    register_type: holding
    address: 233 # 0x000E
    value_type: U_WORD
    skip_updates: 10

# HRU STOP =========================================


# Growatt START

  - platform: modbus_controller
    modbus_controller_id: growatt
    name: "PV Status #"
    address: 3000
    register_type: "read"
#    internal: true
    accuracy_decimals: 0
    id: status
  - platform: modbus_controller
    modbus_controller_id: growatt
    name: "PV Actual Power"
    id: growatt_pac
    register_type: read
    address: 3023 # 0x000E
    value_type: U_DWORD
    unit_of_measurement: "W"
    state_class: total_increasing
    icon: mdi:solar-power
    accuracy_decimals: 1
    filters:
    - multiply: 0.1
    - clamp:
        min_value: 0
        max_value: 10000
        ignore_out_of_range: true
  - platform: modbus_controller
    modbus_controller_id: growatt
    name: "PV Actual Power String 1"
    id: growatt_ps1
    register_type: read
    address: 3005 # 0x000E
    value_type: U_DWORD
    unit_of_measurement: "W"
    accuracy_decimals: 1
    filters:
    - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: growatt
    name: "PV Actual Power String 2"
    id: growatt_ps2
    register_type: read
    address: 3009 # 0x000E
    value_type: U_DWORD
    unit_of_measurement: "W"
    accuracy_decimals: 1
    filters:
    - multiply: 0.1
  # - platform: modbus_controller
  #   modbus_controller_id: growatt
  #   name: "PV Frequentie"
  #   id: growatt_freq
  #   register_type: read
  #   address: 3025 # 0x000E
  #   value_type: U_WORD
  - platform: modbus_controller
    modbus_controller_id: growatt
    name: "PV Temperature"
    id: growatt_temp
    register_type: read
    address: 3093 # 0x000E
    value_type: U_WORD
    unit_of_measurement: "째C"
    accuracy_decimals: 1
    filters:
    - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: growatt
    name: "PV Energy Today"
    id: growatt_etd
    register_type: read
    address: 3049 # 0x000E
    value_type: U_DWORD
    unit_of_measurement: "kWh"
    accuracy_decimals: 1
    filters:
    - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: growatt
    name: "PV Energy Total"
    id: growatt_ett
    register_type: read
    address: 3051 # 0x000E
    value_type: U_DWORD
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: "energy"
    accuracy_decimals: 1
    filters:
    - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: growatt
    name: "PV Derating Mode"
    id: growatt_dm
    register_type: read
    address: 3086 # 0x000E
    value_type: U_WORD

# Growatt END

  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s

number:

# Controlling HRU-400 fan
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Demand ventilation speed" # Sets actual fan speed
    id: HRU_fan_demand_value
    register_type: holding
    address: 2010
    min_value: 0
    max_value: 399
    #mode: slider
    step: 1
    value_type: U_WORD
    use_write_multiple: true
    on_value_range:
      - above: 2.0
        then: 
          - number.set:
              id: HRU_fan_demand_on_off
              value: 1.0
      - below: 1.0
        then:
          - number.set:
              id: HRU_fan_demand_on_off
              value: 0.0
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Demand ventialtion - on/off" # 0 = auto 1 = Manual
    id: HRU_fan_demand_on_off
    register_type: holding
    address: 2011
    min_value: 0
    max_value: 1
    step: 1
    use_write_multiple: true
# 
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Flow ingress speed" # Sets actual fan speed
    id: HRU_fan_flow_ingress_value
    register_type: holding
    address: 2020
    min_value: 0
    max_value: 399
    #mode: slider
    step: 1
    value_type: U_WORD
    use_write_multiple: true
    on_value_range:
      - above: 0.0
        then: 
          - number.set:
              id: HRU_fan_flow_ingress_on_off
              value: 1.0
      - below: 1.0
        then:
          - number.set:
              id: HRU_fan_flow_ingress_on_off
              value: 0.0
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Flow ingress - on/off" # 0 = auto 1 = Manual
    id: HRU_fan_flow_ingress_on_off
    register_type: holding
    address: 2021
    min_value: 0
    max_value: 1
    step: 1
    use_write_multiple: true

###
# Bypass
###
  # 0 = down 
  # 550 = open
  # Inside air is directed to outside without passing the heat ex changer
  # Thus cold outside air does not heat up from the hot inside air
  # Note from manufacturer: 
     # Als u via MobBus RS-485 de bypassklep open wil zetten dient u 
     # de afvoerventilator af te laten toeren naar 200 m쨀/h of minder.
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Bypass valve - on/off" # 0 = auto 1 = Manual
    id: HRU_bypass_valve_on_off
    register_type: holding
    address: 2033
    min_value: 0
    max_value: 1
    step: 1
    use_write_multiple: true
    icon: mdi:home-import-outline

  - platform: modbus_controller
    modbus_controller_id: hru
    name: "HRU baud rate"
    min_value: 0
    max_value: 4
    id: hru_baudrate
    register_type: holding
    address: 1 # 0x000E
    value_type: U_WORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Reset"
    min_value: 0
    max_value: 1
    id: hru_reset
    register_type: holding
    address: 499 # 0x000E
    value_type: U_WORD
    skip_updates: 10
# several numbers not connected
  # - platform: modbus_controller
  #   modbus_controller_id: hru
  #   name: "m3/h vraag leef? zone"
  #   min_value: 0
  #   max_value: 399
  #   step: 1
  #   id: hru_zone1ask
  #   register_type: holding
  #   address: 2210 # 0x000E
  #   value_type: U_WORD
  #   use_write_multiple: true
  # - platform: modbus_controller
  #   modbus_controller_id: hru
  #   name: "m3/h vraag leef? zone on/off"
  #   min_value: 0
  #   max_value: 1
  #   step: 1
  #   id: hru_zone1ask_enable
  #   register_type: holding
  #   address: 2211 # 0x000E
  #   value_type: U_WORD
  #   use_write_multiple: true
  # - platform: modbus_controller
  #   modbus_controller_id: hru
  #   name: "m3/h vraag slaap? zone"
  #   min_value: 0
  #   max_value: 399
  #   step: 1
  #   id: hru_zone2ask
  #   register_type: holding
  #   address: 2212 # 0x000E
  #   value_type: U_WORD
  #   use_write_multiple: true
  # - platform: modbus_controller
  #   modbus_controller_id: hru
  #   name: "m3/h vraag slaap? zone on/off"
  #   min_value: 0
  #   max_value: 1
  #   step: 1
  #   id: hru_zone2ask_enable
  #   register_type: holding
  #   address: 2213 # 0x000E
  #   value_type: U_WORD
  #   use_write_multiple: true
  # - platform: modbus_controller
  #   modbus_controller_id: hru
  #   name: "m3/h vraag natte zone"
  #   min_value: 0
  #   max_value: 399
  #   step: 1
  #   id: hru_zone3ask
  #   register_type: holding
  #   address: 2214 # 0x000E
  #   value_type: U_WORD
  #   use_write_multiple: true
  # - platform: modbus_controller
  #   modbus_controller_id: hru
  #   name: "m3/h vraag natte zone on/off"
  #   min_value: 0
  #   max_value: 1
  #   step: 1
  #   id: hru_zone3ask_enable
  #   register_type: holding
  #   address: 2215 # 0x000E
  #   value_type: U_WORD
  #   use_write_multiple: true
  # - platform: modbus_controller
  #   modbus_controller_id: hru
  #   name: "m3/h vraag kook? zone"
  #   min_value: 0
  #   max_value: 399
  #   step: 1
  #   id: hru_zone4ask
  #   register_type: holding
  #   address: 2216 # 0x000E
  #   value_type: U_WORD
  #   use_write_multiple: true
  # - platform: modbus_controller
  #   modbus_controller_id: hru
  #   name: "m3/h vraag kook? zone on/off"
  #   min_value: 0
  #   max_value: 1
  #   step: 1
  #   id: hru_zone4ask_enable
  #   register_type: holding
  #   address: 2217 # 0x000E
  #   value_type: U_WORD
  #   use_write_multiple: true


# binary_sensor:

  ## somehow I cannot get these to read out, but fortunately they're not variable, so not essential.

  # - platform: modbus_controller
  #   modbus_controller_id: hru
  #   name: "zoneklep1 aangesloten"
  #   id: hru_klep1_connected
  #   register_type: holding
  #   skip_updates: 10
  #   address: 3024 # 0x000E
  #   bitmask: 0x0 #(bit 0)
  # - platform: modbus_controller
  #   modbus_controller_id: hru
  #   name: "zoneklep1 aangesloten"
  #   id: hru_klep2_connected
  #   register_type: holding
  #   skip_updates: 10
  #   address: 3024 # 0x000E
  #   bitmask: 0x1 #(bit 1)
  # - platform: modbus_controller
  #   modbus_controller_id: hru
  #   name: "zoneklep1 aangesloten"
  #   id: hru_klep3_connected
  #   register_type: holding
  #   skip_updates: 10
  #   address: 3024 # 0x000E
  #   bitmask: 0x2 #(bit 2)
  # - platform: modbus_controller
  #   modbus_controller_id: hru
  #   name: "zoneklep1 aangesloten"
  #   id: hru_klep4_connected
  #   register_type: holding
  #   skip_updates: 10
  #   address: 3024 # 0x000E
  #   bitmask: 0x3 #(bit 3)

switch:
  - platform: template
    name: "Bypass valve NG - on/off" # 0 = auto 1 = Manual
    id: HRU_bypass_valve_on_off_switch
    icon: mdi:toggle-switch-variant
    turn_on_action:
      then:
        if:
          condition:
            lambda: 'return id(hru_m3h_toevoer_binnen_total).state > 200;'
          then: 
            - logger.log: "The sensor value is above 200!, change fan to 200"
            - number.set:
                id: HRU_fan_demand_value
                value: 200 # Lower the fan to the bypass allowed value
            - delay: 5s # Give fan spin-down time
            - number.set:
                id: HRU_bypass_valve_on_off
                value: 1 # Set the bypass to on.
            - delay: 5s # Give bypass valve time to open
            - number.set:
                id: HRU_fan_demand_value
                value: 0 # Set the fan back to auto.
          else:
            - logger.log: "The sensor value is below 200!, turn on bypass"
            - number.set:
                id: HRU_fan_demand_value
                value: 1 # Set the bypass to on.
    turn_off_action:
      then:
        if:
          condition:
            lambda: 'return id(hru_m3h_toevoer_binnen_total).state > 200;'
          then: 
            - logger.log: "The sensor value is above 200, change fan to 200 before turn off"
            - number.set:
                id: HRU_fan_demand_value
                value: 200 # Lower the fan to the bypass allowed value
            - delay: 5s # Give fan spin-down time
            - number.set:
                id: HRU_bypass_valve_on_off
                value: 0 # Set the bypass to off.
            - delay: 5s # Give bypass valve time to open
            - number.set:
                id: HRU_fan_demand_value
                value: 0 # Set the fan back to auto.
          else:
            - logger.log: "The sensor value is below 200, turn off bypass"
            - number.set:
                id: HRU_bypass_valve_on_off
                value: 0 # Set the bypass to off.

text_sensor:
  - platform: template
    name: "PV Status"
    icon: mdi:eye
    entity_category: diagnostic
    lambda: |-
      if ((id(status).state) == 1) {
        return {"Normal"};
      } else if ((id(status).state) == 0)  {
        return {"Standby"};
      } else if ((id(status).state) == 2)  {
        return {"Discharge"};
      } else if ((id(status).state) == 3)  {
        return {"Fault"};
      } else if ((id(status).state) == 4)  {
        return {"Flash"};
      } else if ((id(status).state) == 5)  {
        return {"PV Charging"};
      } else if ((id(status).state) == 6)  {
        return {"AC Charging"};
      } else if ((id(status).state) == 7)  {
        return {"Combined Charging"};
      } else if ((id(status).state) == 8)  {
        return {"Combined Charging & Bypass"};
      } else if ((id(status).state) == 9)  {
        return {"PV Charging & Bypass"};
      } else if ((id(status).state) == 10)  {
        return {"AC Charging & Bypass"};
      } else if ((id(status).state) == 11)  {
        return {"Bypass"};
      } else if (id(status).state == 12)  {
        return {"PV Charge and Discharge"};
      } else {
        return {"Unknown"};
      }

  - platform: wifi_info
    ip_address:
      name: ESP IP Address
    ssid:
      name: ESP Connected SSID
    bssid:
      name: ESP Connected BSSID
    mac_address:
      name: ESP Mac Wifi Address

fan:
  - platform: speed
    id: wtw_fan
    name: "WTW - Fan"
    output: fanoutput
    speed_count: 7 
    restore_mode: RESTORE_DEFAULT_ON

output:
  - platform: template
    id: fanoutput
    type: float
    write_action:
      - if:
          condition:
            lambda: return (id(wtw_fan).state);
          then:
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 1);
                then:
                  - logger.log: "fan_output_value: 1"
                  - number.set:
                      id: HRU_fan_demand_on_off
                      value: 1.0
                  - number.set:
                      id: HRU_fan_demand_value
                      value: 100
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 2);
                then:
                  - logger.log: "fan_output_value: 2"
                  - number.set:
                      id: HRU_fan_demand_on_off
                      value: 1.0
                  - number.set:
                      id: HRU_fan_demand_value
                      value: 150
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 3);
                then:
                  - logger.log: "fan_output_value: 3"
                  - number.set:
                      id: HRU_fan_demand_on_off
                      value: 1.0
                  - number.set:
                      id: HRU_fan_demand_value
                      value: 200
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 4);
                then:
                  - logger.log: "fan_output_value: 4"
                  - number.set:
                      id: HRU_fan_demand_on_off
                      value: 1.0
                  - number.set:
                      id: HRU_fan_demand_value
                      value: 250
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 5);
                then:
                  - logger.log: "fan_output_value: 5"
                  - number.set:
                      id: HRU_fan_demand_on_off
                      value: 1.0
                  - number.set:
                      id: HRU_fan_demand_value
                      value: 300
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 6);
                then:
                  - logger.log: "fan_output_value: 6"
                  - number.set:
                      id: HRU_fan_demand_on_off
                      value: 1.0
                  - number.set:
                      id: HRU_fan_demand_value
                      value: 350
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 7);
                then:
                  - logger.log: "fan_output_value: 7"
                  - number.set:
                      id: HRU_fan_demand_on_off
                      value: 1.0
                  - number.set:
                      id: HRU_fan_demand_value
                      value: 399
      - if:
          condition:
            lambda: return !(id(wtw_fan).state);
          then:
            - logger.log: "fan_output_value: Back to auto"
            - number.set:
                id: HRU_fan_demand_on_off
                value: 0.0

